"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteTodo = exports.updateTodo = exports.addTodo = exports.getTodos = void 0;
const AWS = require("aws-sdk");
const docClient = new AWS.DynamoDB.DocumentClient();
async function getTodos() {
    const params = {
        TableName: process.env.TODOS_TABLE,
    };
    try {
        const data = await docClient.scan(params).promise();
        return data.Items;
    }
    catch (err) {
        console.log("DynamoDB error: ", err);
        return null;
    }
}
exports.getTodos = getTodos;
async function addTodo(todo) {
    const params = {
        TableName: process.env.TODOS_TABLE,
        Item: todo,
    };
    try {
        await docClient.put(params).promise();
        return todo;
    }
    catch (err) {
        console.log("DynamoDB error: ", err);
        return null;
    }
}
exports.addTodo = addTodo;
async function updateTodo(todo) {
    let params = {
        TableName: process.env.TODOS_TABLE,
        Key: {
            id: todo.id,
        },
        ExpressionAttributeValues: {},
        ExpressionAttributeNames: {},
        UpdateExpression: "",
        ReturnValues: "UPDATED_NEW",
    };
    let prefix = "set ";
    let attributes = Object.keys(todo);
    for (let i = 0; i < attributes.length; i++) {
        let attribute = attributes[i];
        if (attribute !== "id") {
            params["UpdateExpression"] +=
                prefix + "#" + attribute + " = :" + attribute;
            params["ExpressionAttributeValues"][":" + attribute] = todo[attribute];
            params["ExpressionAttributeNames"]["#" + attribute] = attribute;
            prefix = ", ";
        }
    }
    try {
        await docClient.update(params).promise();
        return todo;
    }
    catch (err) {
        console.log("DynamoDB error: ", err);
        return null;
    }
}
exports.updateTodo = updateTodo;
async function deleteTodo(todoId) {
    const params = {
        TableName: process.env.TODOS_TABLE,
        Key: {
            id: todoId,
        },
    };
    try {
        await docClient.delete(params).promise();
        return todoId;
    }
    catch (err) {
        console.log("DynamoDB error: ", err);
        return null;
    }
}
exports.deleteTodo = deleteTodo;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9kb1NlcnZpY2VzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidG9kb1NlcnZpY2VzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUMvQixNQUFNLFNBQVMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsY0FBYyxFQUFFLENBQUM7QUFZN0MsS0FBSyxVQUFVLFFBQVE7SUFDNUIsTUFBTSxNQUFNLEdBQUc7UUFDYixTQUFTLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXO0tBQ25DLENBQUM7SUFDRixJQUFJO1FBQ0YsTUFBTSxJQUFJLEdBQUcsTUFBTSxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ3BELE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztLQUNuQjtJQUFDLE9BQU8sR0FBRyxFQUFFO1FBQ1osT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNyQyxPQUFPLElBQUksQ0FBQztLQUNiO0FBQ0gsQ0FBQztBQVhELDRCQVdDO0FBRU0sS0FBSyxVQUFVLE9BQU8sQ0FBQyxJQUFVO0lBQ3RDLE1BQU0sTUFBTSxHQUFHO1FBQ2IsU0FBUyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVztRQUNsQyxJQUFJLEVBQUUsSUFBSTtLQUNYLENBQUM7SUFDRixJQUFJO1FBQ0YsTUFBTSxTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ3RDLE9BQU8sSUFBSSxDQUFDO0tBQ2I7SUFBQyxPQUFPLEdBQUcsRUFBRTtRQUNaLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDckMsT0FBTyxJQUFJLENBQUM7S0FDYjtBQUNILENBQUM7QUFaRCwwQkFZQztBQUVNLEtBQUssVUFBVSxVQUFVLENBQUMsSUFBUztJQUN4QyxJQUFJLE1BQU0sR0FBVztRQUNuQixTQUFTLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXO1FBQ2xDLEdBQUcsRUFBRTtZQUNILEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRTtTQUNaO1FBQ0QseUJBQXlCLEVBQUUsRUFBRTtRQUM3Qix3QkFBd0IsRUFBRSxFQUFFO1FBQzVCLGdCQUFnQixFQUFFLEVBQUU7UUFDcEIsWUFBWSxFQUFFLGFBQWE7S0FDNUIsQ0FBQztJQUNGLElBQUksTUFBTSxHQUFHLE1BQU0sQ0FBQztJQUNwQixJQUFJLFVBQVUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ25DLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzFDLElBQUksU0FBUyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5QixJQUFJLFNBQVMsS0FBSyxJQUFJLEVBQUU7WUFDdEIsTUFBTSxDQUFDLGtCQUFrQixDQUFDO2dCQUN4QixNQUFNLEdBQUcsR0FBRyxHQUFHLFNBQVMsR0FBRyxNQUFNLEdBQUcsU0FBUyxDQUFDO1lBQ2hELE1BQU0sQ0FBQywyQkFBMkIsQ0FBQyxDQUFDLEdBQUcsR0FBRyxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDdkUsTUFBTSxDQUFDLDBCQUEwQixDQUFDLENBQUMsR0FBRyxHQUFHLFNBQVMsQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUNoRSxNQUFNLEdBQUcsSUFBSSxDQUFDO1NBQ2Y7S0FDRjtJQUVELElBQUk7UUFDRixNQUFNLFNBQVMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDekMsT0FBTyxJQUFJLENBQUM7S0FDYjtJQUFDLE9BQU8sR0FBRyxFQUFFO1FBQ1osT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNyQyxPQUFPLElBQUksQ0FBQztLQUNiO0FBQ0gsQ0FBQztBQS9CRCxnQ0ErQkM7QUFFTSxLQUFLLFVBQVUsVUFBVSxDQUFDLE1BQWM7SUFDN0MsTUFBTSxNQUFNLEdBQUc7UUFDYixTQUFTLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXO1FBQ2xDLEdBQUcsRUFBRTtZQUNILEVBQUUsRUFBRSxNQUFNO1NBQ1g7S0FDRixDQUFDO0lBQ0YsSUFBSTtRQUNGLE1BQU0sU0FBUyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUN6QyxPQUFPLE1BQU0sQ0FBQztLQUNmO0lBQUMsT0FBTyxHQUFHLEVBQUU7UUFDWixPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3JDLE9BQU8sSUFBSSxDQUFDO0tBQ2I7QUFDSCxDQUFDO0FBZEQsZ0NBY0MiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBBV1MgPSByZXF1aXJlKFwiYXdzLXNka1wiKTtcbmNvbnN0IGRvY0NsaWVudCA9IG5ldyBBV1MuRHluYW1vREIuRG9jdW1lbnRDbGllbnQoKTtcbmltcG9ydCBUb2RvIGZyb20gXCIuL21vZGVsXCI7XG5cbnR5cGUgUGFyYW1zID0ge1xuICBUYWJsZU5hbWU6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgS2V5OiBzdHJpbmcgfCB7fTtcbiAgRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlczogYW55O1xuICBFeHByZXNzaW9uQXR0cmlidXRlTmFtZXM6IGFueTtcbiAgVXBkYXRlRXhwcmVzc2lvbjogc3RyaW5nO1xuICBSZXR1cm5WYWx1ZXM6IHN0cmluZztcbn07XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRUb2RvcygpIHtcbiAgY29uc3QgcGFyYW1zID0ge1xuICAgIFRhYmxlTmFtZTogcHJvY2Vzcy5lbnYuVE9ET1NfVEFCTEUsXG4gIH07XG4gIHRyeSB7XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IGRvY0NsaWVudC5zY2FuKHBhcmFtcykucHJvbWlzZSgpO1xuICAgIHJldHVybiBkYXRhLkl0ZW1zO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBjb25zb2xlLmxvZyhcIkR5bmFtb0RCIGVycm9yOiBcIiwgZXJyKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYWRkVG9kbyh0b2RvOiBUb2RvKSB7XG4gIGNvbnN0IHBhcmFtcyA9IHtcbiAgICBUYWJsZU5hbWU6IHByb2Nlc3MuZW52LlRPRE9TX1RBQkxFLFxuICAgIEl0ZW06IHRvZG8sXG4gIH07XG4gIHRyeSB7XG4gICAgYXdhaXQgZG9jQ2xpZW50LnB1dChwYXJhbXMpLnByb21pc2UoKTtcbiAgICByZXR1cm4gdG9kbztcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgY29uc29sZS5sb2coXCJEeW5hbW9EQiBlcnJvcjogXCIsIGVycik7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZVRvZG8odG9kbzogYW55KSB7XG4gIGxldCBwYXJhbXM6IFBhcmFtcyA9IHtcbiAgICBUYWJsZU5hbWU6IHByb2Nlc3MuZW52LlRPRE9TX1RBQkxFLFxuICAgIEtleToge1xuICAgICAgaWQ6IHRvZG8uaWQsXG4gICAgfSxcbiAgICBFeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzOiB7fSxcbiAgICBFeHByZXNzaW9uQXR0cmlidXRlTmFtZXM6IHt9LFxuICAgIFVwZGF0ZUV4cHJlc3Npb246IFwiXCIsXG4gICAgUmV0dXJuVmFsdWVzOiBcIlVQREFURURfTkVXXCIsXG4gIH07XG4gIGxldCBwcmVmaXggPSBcInNldCBcIjtcbiAgbGV0IGF0dHJpYnV0ZXMgPSBPYmplY3Qua2V5cyh0b2RvKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhdHRyaWJ1dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbaV07XG4gICAgaWYgKGF0dHJpYnV0ZSAhPT0gXCJpZFwiKSB7XG4gICAgICBwYXJhbXNbXCJVcGRhdGVFeHByZXNzaW9uXCJdICs9XG4gICAgICAgIHByZWZpeCArIFwiI1wiICsgYXR0cmlidXRlICsgXCIgPSA6XCIgKyBhdHRyaWJ1dGU7XG4gICAgICBwYXJhbXNbXCJFeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzXCJdW1wiOlwiICsgYXR0cmlidXRlXSA9IHRvZG9bYXR0cmlidXRlXTtcbiAgICAgIHBhcmFtc1tcIkV4cHJlc3Npb25BdHRyaWJ1dGVOYW1lc1wiXVtcIiNcIiArIGF0dHJpYnV0ZV0gPSBhdHRyaWJ1dGU7XG4gICAgICBwcmVmaXggPSBcIiwgXCI7XG4gICAgfVxuICB9XG5cbiAgdHJ5IHtcbiAgICBhd2FpdCBkb2NDbGllbnQudXBkYXRlKHBhcmFtcykucHJvbWlzZSgpO1xuICAgIHJldHVybiB0b2RvO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBjb25zb2xlLmxvZyhcIkR5bmFtb0RCIGVycm9yOiBcIiwgZXJyKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZGVsZXRlVG9kbyh0b2RvSWQ6IHN0cmluZykge1xuICBjb25zdCBwYXJhbXMgPSB7XG4gICAgVGFibGVOYW1lOiBwcm9jZXNzLmVudi5UT0RPU19UQUJMRSxcbiAgICBLZXk6IHtcbiAgICAgIGlkOiB0b2RvSWQsXG4gICAgfSxcbiAgfTtcbiAgdHJ5IHtcbiAgICBhd2FpdCBkb2NDbGllbnQuZGVsZXRlKHBhcmFtcykucHJvbWlzZSgpO1xuICAgIHJldHVybiB0b2RvSWQ7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGNvbnNvbGUubG9nKFwiRHluYW1vREIgZXJyb3I6IFwiLCBlcnIpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG4iXX0=